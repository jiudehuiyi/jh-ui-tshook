[{"D:\\社招项目\\jh-ui-tshook\\src\\index.tsx":"1","D:\\社招项目\\jh-ui-tshook\\src\\reportWebVitals.ts":"2","D:\\社招项目\\jh-ui-tshook\\src\\App.tsx":"3","D:\\社招项目\\jh-ui-tshook\\src\\components\\Button\\button.tsx":"4","D:\\社招项目\\jh-ui-tshook\\src\\components\\Icon\\icon.tsx":"5"},{"size":508,"mtime":1608456437879,"results":"6","hashOfConfig":"7"},{"size":425,"mtime":1608109138662,"results":"8","hashOfConfig":"7"},{"size":939,"mtime":1609409028347,"results":"9","hashOfConfig":"7"},{"size":3386,"mtime":1609395245850,"results":"10","hashOfConfig":"7"},{"size":848,"mtime":1609409125750,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"glqs55",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"14"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\社招项目\\jh-ui-tshook\\src\\index.tsx",[],["24","25"],"D:\\社招项目\\jh-ui-tshook\\src\\reportWebVitals.ts",[],"D:\\社招项目\\jh-ui-tshook\\src\\App.tsx",["26"],"D:\\社招项目\\jh-ui-tshook\\src\\components\\Button\\button.tsx",["27"],"import React,{ useState } from \"react\";\r\nimport classnames from \"classnames\";\r\n\r\nexport type ButtonShape = \"circle\" | \"round\";\r\nexport type ButtonSize = \"large\" | \"middle\" | \"small\";\r\nexport type ButtonType = \"primary\" | \"ghost\" | \"dashed\" | \"link\" | \"text\" | \"default\";\r\nexport type ButtonHtmlType = \"submit\" | \"button\" | \"reset\";\r\n\r\n\r\ninterface BaseButtonProps {\r\n    className?:string;\r\n    block?:boolean;\r\n    danger?:boolean;\r\n    disabled?:boolean;\r\n    ghost?:boolean;\r\n    href?:string;\r\n    htmlType: ButtonHtmlType;\r\n    icon?:React.ReactNode;\r\n    loading?:boolean | { delay?:number };\r\n    shape?:ButtonShape;\r\n    size?:ButtonSize;\r\n    target?:string;\r\n    btnType?:ButtonType;\r\n    children?:React.ReactNode;\r\n    onClick?:()=>void;\r\n}\r\n\r\n//标签类型组合\r\nexport type AnchorButtonProps = BaseButtonProps & React.AnchorHTMLAttributes<HTMLElement>;\r\n//button标签组合\r\nexport type NativeButtonProps = BaseButtonProps & React.ButtonHTMLAttributes<HTMLButtonElement>\r\n//加Partial的原因是因为AnchorButtonProp和NativeButtonProps是可能发生类型冲突\r\nexport type ButtonProps = Partial<AnchorButtonProps & NativeButtonProps>;\r\n\r\nconst Button:React.FC<ButtonProps> = (props)=>{\r\n\r\n\r\n    const [clicked,setClicked] = useState<boolean>( false );\r\n\r\n    //解构属性\r\n    const {\r\n        className,block,danger,disabled,ghost,href,htmlType,icon,loading,shape,size,\r\n        btnType  ,children,...restProps\r\n    } = props;\r\n    const iconNode = icon ? icon : null;\r\n\r\n    //合并类名，为所传得属性调整为相应得样式,\r\n    //prefixCls为定义常规属性，className为外部传入的类名,{}则为传入的props属性需要改变对应的样式\r\n    const prefixCls = \"btn\";\r\n    const classes = classnames(prefixCls,className,{\r\n        [`btn-${btnType}`]:btnType,\r\n        [`btn-${size}`]:size,\r\n        [`btn-block`]:block,\r\n        [`btn-danger`]:danger,\r\n        [`btn-disabled`]:disabled,\r\n        [`btn-${shape}`]:shape\r\n    })\r\n\r\n    const handleClick:React.MouseEventHandler< HTMLButtonElement | HTMLAnchorElement  > = (e)=>{\r\n        //防止fast-click类似于fastclick.js\r\n        let timer\r\n        setClicked( true );\r\n        clearTimeout( timer  );\r\n        timer = window.setTimeout( ()=>setClicked(false),500 );\r\n\r\n        const onClick = props.onClick;\r\n        if( onClick ) {\r\n            (onClick as React.MouseEventHandler< HTMLButtonElement | HTMLAnchorElement > )(e);\r\n        }\r\n    }\r\n\r\n\r\n    //判断是a标签还是button标签\r\n    if(  btnType === \"link\" && href ) {\r\n        return (\r\n            <a\r\n                className={classes}\r\n                href={href}\r\n                onClick={ (ev)=>handleClick(ev) }\r\n                {...restProps}\r\n            >\r\n                {\r\n                    children\r\n                }\r\n            </a>\r\n        )\r\n    }else {\r\n        return (\r\n            <button\r\n                className={classes}\r\n                disabled={disabled}\r\n                type={ htmlType || \"button\" }\r\n                onClick={ (ev)=>handleClick(ev) }\r\n                {...restProps}\r\n            >\r\n               {iconNode} {children}\r\n            </button>\r\n        )\r\n    }  \r\n}\r\n\r\nButton.defaultProps = {\r\n    disabled:false,\r\n    btnType:\"default\",\r\n    size:\"middle\",\r\n    block:false,\r\n    danger:false,\r\n}\r\n\r\nexport default Button;\r\n\r\n\r\n//暂缺loading和icon属性","D:\\社招项目\\jh-ui-tshook\\src\\components\\Icon\\icon.tsx",[],{"ruleId":"28","replacedBy":"29"},{"ruleId":"30","replacedBy":"31"},{"ruleId":"32","severity":1,"message":"33","line":3,"column":15,"nodeType":"34","messageId":"35","endLine":3,"endColumn":23},{"ruleId":"32","severity":1,"message":"36","line":38,"column":12,"nodeType":"34","messageId":"35","endLine":38,"endColumn":19},"no-native-reassign",["37"],"no-negated-in-lhs",["38"],"@typescript-eslint/no-unused-vars","'faCoffee' is defined but never used.","Identifier","unusedVar","'clicked' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]